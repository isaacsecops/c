import org.apache.tools.ant.filters.FixCrLfFilter

plugins {
    id "com.jfrog.artifactory" version "3.1.2"
    id "org.sonarqube" version "2.5"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'project-report'
apply plugin: 'java-library-distribution'

repositories {
    maven { url 'http://cx-artifactory:8081/artifactory/libs-snapshot' }


group = 'com.checkmarx'
//For development purpose
version = '9.20.0' + "-" + getDate()
//For release purpose
//version = '9.20.0'
compileJava.options.encoding = 'UTF-8'
compileJava.sourceCompatibility = 8
compileJava.targetCompatibility = 8

jar.doFirst {
    manifest {
        attributes 'Implementation-Title': project.description,
                'Implementation-Version': project.version,
                'Implementation-URL': 'http://www.checkmarx.com',
                'Main-Class': 'com.checkmarx.cxconsole.CxConsoleLauncher',
                'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')

        if (System.env.BUILD_NUMBER) {
            attributes 'Implementation-Build': System.env.BUILD_NUMBER
        }
        if (System.env.GIT_COMMIT) {
            attributes 'Repository-Version': System.env.GIT_COMMIT
        }
    }
}

tasks.withType(Tar) {
    enabled = false
    compression = Compression.GZIP
}

dependencies {
    compile 'commons-collections:commons-collections:3.2.2',
            'commons-io:commons-io:2.5',
            'commons-cli:commons-cli:1.4',
            'org.apache.commons:commons-lang3:3.7',
            'org.apache.commons:commons-compress:1.15',
            'org.apache.logging.log4j:log4j-api:2.10.0',
            'org.apache.logging.log4j:log4j-core:2.10.0',
            'org.slf4j:slf4j-api:1.8.0-beta1',
            'org.slf4j:slf4j-log4j12:1.8.0-beta1',
            'org.jdom:jdom:2.0.2',
            'com.checkmarx.components:zipper:1.+',
            'org.apache.cxf:cxf-rt-frontend-jaxws:3.2.8',
            'org.apache.cxf:cxf-rt-transports-http-jetty:3.2.8',
            'org.apache.httpcomponents:httpclient:4.5.5',
            'org.apache.httpcomponents:httpmime:4.5.5',
            'org.apache.httpcomponents:httpclient-win:4.5.5',
            'javax.ws.rs:javax.ws.rs-api:2.1',
            'org.apache.ant:ant:1.10.1',
            'net.lingala.zip4j:zip4j:1.3.2',
            'com.github.junrar:junrar:0.7',
            'org.slf4j:slf4j-api:1.7.25',
            'org.slf4j:slf4j-log4j12:1.7.25',
            'org.apache.logging.log4j:log4j-core:2.10.0',
            'com.fasterxml.jackson.core:jackson-databind:2.10.2',
            'org.bouncycastle:bcprov-jdk15on:1.60',
            'com.google.guava:guava:24.1.1-jre',
            'org.codehaus.plexus:plexus-archiver:3.6.0'
    compile('com.checkmarx:cx-ws-fs-agent:20.0.3') {
        exclude group: 'io.vertx:vertx-core'
        exclude group: 'io.vertx:vertx-web'
        exclude group: 'org.bouncycastle:bcprov-jdk15on'
        exclude group: 'org.springframework:spring-web'
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-databind'
        exclude group: 'org.codehaus.plexus', module: 'plexus-archiver'
        exclude group: 'org.apache.commons', module: 'commons-compress'
        exclude group: 'com.github.junrar', module:'junrar'
        exclude group: 'com.google.guava', module:'guava'
    }
}

distributions {
    main {
        baseName = 'CxConsolePlugin'
        contents {
            from('src/main/scripts') {
                filter {
                    it.replaceAll('cx_console\\.jar', jar.archiveName)
                }
                filter(FixCrLfFilter.class,
                        eol: FixCrLfFilter.CrLf.newInstance("lf"))
            }
            from('src/main/scripts/V900') {
                filter {
                    it.replaceAll('cx_console\\.jar', jar.archiveName)
                }
                filter(FixCrLfFilter.class,
                        eol: FixCrLfFilter.CrLf.newInstance("lf"))
                into 'Examples\\V900'
            }
            from('src/main') {
                include 'config/krb5.conf'
            }
            from('src/main/resources') {
                include 'cx_console.properties'
                filter {
                    it.replaceAll('\\$\\{pom\\.version}', version)
                }
                into 'config'
            }
            from('src/main/resources') {
                include 'log4j.xml'
            }
        }
    }
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd-HHmm')
    return formattedDate
}